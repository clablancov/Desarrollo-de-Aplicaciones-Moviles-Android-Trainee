
=====================================================================================================
DATOS PRIMITIVOS
El lenguaje Java da de base una serie de tipos de datos primitivos.
•	byte
•	short
•	int
•	long
•	float
•	double
•	boolean
•	char
Es importante saber que estos son tipos de datos del lenguaje y que no representan objetos. Cosa que sí sucede con el resto de elementos del lenguaje Java.
byte
Representa un tipo de dato de 8 bits con signo. De tal manera que puede almacenar los valores numéricos de -128 a 127 (ambos inclusive).
short
Representa un tipo de dato de 16 bits con signo. De esta manera almacena valores numéricos de -32.768 a 32.767.
int
Es un tipo de dato de 32 bits con signo para almacenar valores numéricos. Cuyo valor mínimo es -231 y el valor máximo 231-1.
long
Es un tipo de dato de 64 bits con signo que almacena valores numéricos entre -263 a 263-1
float
Es un tipo dato para almacenar números en coma flotante con precisión simple de 32 bits.
double
Es un tipo de dato para almacenar números en coma flotante con doble precisión de 64 bits.
boolean
Sirve para definir tipos de datos booleanos. Es decir, aquellos que tienen un valor de true o false. Ocupa 1 bit de información.
char
Es un tipo de datos que representa a un carácter Unicode sencillo de 16 bits.
Valores por defecto de los tipos de datos primitivos
En el caso de que definamos una variable y no le demos ningún valor, por defecto llevarán los siguientes valores:
Dato Primitivo	Valor por Defecto
byte	0
short	0
int	0
long	0L
float	0.0f
double	0.0d
char	‘u0000’
String (o cualquier objeto)	null
boolean	false


CLASE STRING
Un String en Java representa una cadena de caracteres no modificable.
Todos los literales de la forma "cualquier texto", es decir, literales entre comillas dobles, que aparecen en un programa java se implementan como objetos de la clase String.
CREAR UN STRING
Se puede crear un String de varias formas, entre ellas:
-         Utilizando una cadena de caracteres entre comillas:
String s1 = "abcdef";   

Debemos recordar que:
Los objetos String no son modificables.
Por lo tanto, los métodos que actúan sobre un String con la intención de modificarlo lo que hacen es crear un nuevo String a partir del original y devolverlo modificado.
Por ejemplo: Una operación como convertir a mayúsculas o minúsculas un String no lo modificará sino que creará y devolverá un nuevo String con el resultado de la operación.
